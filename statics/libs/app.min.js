APPNAME = 'lab'
getPartial = function( path )
{
	return '/statics/partials/' + path;
} 

function hello(name)
{
	console.log('hello %s', name);
}

angular
	.module( APPNAME, [])
;

console.group('Good day to you sir!');
console.log("         #              ");
console.log("        ###             ");
console.log("      ### ###           ");
console.log("     ###   ###          ");
console.log("   ###         #######  ");
console.log("  ###       #######     ");
console.log(" #########     ###      ");
console.log("###.            ###     ");
console.log('');
console.log("I'm a freelance creative technologist.");
console.log("You have a project? Let's talk!");
console.log('hello@alexandremasy.com');
console.log('http://linkedin.com/in/amasy/');
console.log('');
console.log("You want more ?");
console.log("http://github.com/ahsx");
console.log("http://twitter.com/beg_sleep");
console.log('');
console.groupEnd('Good day to you sir!')
angular
	.module( APPNAME )
	.controller('AppController', ['$rootScope', '$scope', function($rootScope, $scope)
	{
		$rootScope.open = false;
		$rootScope.openSide = 'options';
		$rootScope.options = {};

		/**
		 *	Save to clipboard
		 *
		 *	@param text {String}
		 **/
		$scope.saveToClipboard = function( text )
		{
			window.prompt("Copy to clipboard: Ctrl+C, Enter", text);
		}

		/**
		 *	Track the social information into Google Analytics
		 *	
		 *	@param network {String}
		 *	@param action {String}
		 **/
		$scope.trackSocial = function( network, action )
		{
			ga('send', 'social', network, action, window.location.href);
		}
	}]);
angular
	.module( APPNAME )
	.controller('ScreenplayController', ['$scope', '$rootScope', '$element',  '$window', 'CanvasService', function($scope, $rootScope, $element, $window, CanvasService)
	{
		CanvasService.init( $element.find('canvas'), jQuery($element).find('.container'), $window );
		$rootScope.saveCanvas = function()
		{
			$rootScope.saveURL = CanvasService.getURL();
			window.location.href = $rootScope.saveURL;
		}

		$scope.$watchCollection( 'options', function(newVal, oldVal)
		{
			CanvasService.update( newVal );
		})
	}])
;
angular
	.module( APPNAME )
	.directive('description', [function(){
		// Runs during compile
		return {
			// name: '',
			// priority: 1,
			// terminal: true,
			// scope: {}, // {} = isolate, true = child, false/undefined = no change
			controller: function($scope, $element, $attrs, $transclude) 
			{
				$scope.title = $attrs.title || 'Warning: untitled application';
				$scope.subtitle = $attrs.subtitle || '';
				$scope.github = $attrs.github || 'Warning: no url defined';
				$scope.demo = $attrs.demo || 'Warning: no url defined';
				$scope.keywords = $attrs.keywords || 'Warning, no, keywords';
				$scope.image = $attrs.image || 'Warning: no image defined';
			},
			// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			// templateUrl: getPartial('directives/description.html'),
			// replace: true,
			// transclude: true,
			// compile: function(tElement, tAttrs, transclude)
			// { 
			// 	return {
			// 		pre: function($scope)
			// 		{
			// 			transclude($scope, function(clone)
			// 			{
			// 				$scope.description = clone[0].textContent || 'Warning: no application description';
			// 			})
			// 		}
			// 	}
			// },
			link: function($scope, iElm, iAttrs, controller) {
				
			}
		};
	}]);
angular
	.module( APPNAME )
	.directive('dropdown', [function()
	{
		// Runs during compile
		return {
			// name: '',
			// priority: 1,
			// terminal: true,
			scope: {
				title: '@',
				value: '=model'
			}, // {} = isolate, true = child, false/undefined = no change
			// controller: function($scope, $element, $attrs, $transclude) {},
			// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			templateUrl: getPartial('directives/dropdown.html'),
			// replace: true,
			transclude: true,
			// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
			// link: function($scope, iElm, iAttrs, controller) {
			// }
		};
	}]);
angular
	.module( APPNAME )
	.directive('icon', [function(){
		// Runs during compile
		return {
			// name: '',
			// priority: 1,
			// terminal: true,
			scope: {}, // {} = isolate, true = child, false/undefined = no change
			controller: function($scope, $element, $attrs, $transclude) 
			{
				$scope.label = $attrs.label;
				$scope.href = '#' + $attrs.label;
				$scope.width = $attrs.width || 32;
				$scope.height = $attrs.height || 32;

			},
			// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			templateUrl: getPartial('directives/icon-directive.html'),
			// replace: true,
			// transclude: true,
			// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
			link: function($scope, iElm, iAttrs, controller) {
				
			}
		};
	}]);
/**
 *	Range directive
 *	
 *	Display a range component. 
 *
 *	Parameters:
 * 		- min {Number} Minimun value allowed
 * 		- max {Number} Maximum value allowed
 * 		- title {String} Title displayed in the label
 * 		- step {Number}	Each time we click on + and - how much do we add or retract
 * 		- precision {Number} What is the precision of the display
 * 		- value {Number} The initial value
 * 		- movel {String} Where do we store the value (which scope variable)
 *
 *	@author Alexandre Masy
 *	@version 1.2
 **/
angular
	.module( APPNAME )
	.directive('range', [function(){
		// Runs during compile
		return {
			// name: '',
			// priority: 1,
			// terminal: true,
			scope: {
				min: 		'@',
				max: 		'@',
				title: 		'@',
				step: 		'@',
				precision: 	'@',
				value: 		'=model'
			}, // {} = isolate, true = child, false/undefined = no change
			// controller: function($scope, $element, $attrs, $transclude) {},
			// require: '^', // Array = multiple requires, ? = optional, ^ = check parent elements
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			templateUrl: getPartial('directives/range.html'),
			// replace: true,
			// transclude: true,
			// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
			link: function($scope, $element, $attrs, controller) 
			{
				$scope.value = $attrs.value || 0;
				$scope.step = parseFloat($attrs.step) || 1;
				$scope.precision = $attrs.precision || 1;

				$scope.plus = function()
				{
					var n = parseFloat($scope.value) + $scope.step;
					$scope.value = Math.min( n, $attrs.max );
				}

				$scope.minus = function()
				{
					var n = parseFloat($scope.value) - $scope.step;
					$scope.value = Math.max( n, $attrs.min );
				}
			}
		};
	}]);
"use strict";

/**
* SVG Collection directive
*
* Description
*/
angular
	.module( APPNAME )
	.directive('sprite', [function(){
		// Runs during compile
		return {
			// name: '',
			// priority: 1,
			// terminal: true,
			// scope: {}, // {} = isolate, true = child, false/undefined = no change
			// controller: function($scope, $element, $attrs, $transclude) {},
			// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			templateUrl: getPartial('directives/svg-sprite.html'),
			// replace: true,
			// transclude: true,
			// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
			link: function($scope, iElm, iAttrs, controller) {
				
			}
		};
	}]);
angular
	.module( APPNAME )
	.directive('switch', [function(){
		// Runs during compile
		return {
			// name: '',
			// priority: 1,
			// terminal: true,
			scope: {
				labelon: 	'@',
				labeloff: 	'@',
				on: 		'@',
				title: 		'@',
				value: 		"=model"
			}, // {} = isolate, true = child, false/undefined = no change
			// controller: function($scope, $element, $attrs, $transclude) {},
			// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			templateUrl: getPartial('directives/switch.html'),
			// replace: true,
			// transclude: true,
			// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
			link: function($scope, iElm, iAttrs, controller) {
				$scope.value = iAttrs.on === 'true';
			}
		};
	}]);
angular
	.module( APPNAME )
	.directive('toolbar', [function(){
		// Runs during compile
		return {
			// name: '',
			// priority: 1,
			// terminal: true,
			// scope: {}, // {} = isolate, true = child, false/undefined = no change
			// controller: function($scope, $element, $attrs, $transclude) {},
			// controller: 'ToolbarController',
			// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			templateUrl: getPartial('directives/toolbar.html'),
			replace: true,
			transclude: true,
			// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
			link: function($scope, iElm, iAttrs, controller) {
				// controller.init(iElm)	
			}
		};
	}]);
angular
	.module( APPNAME )
	.directive('toolbaritem', ['$rootScope', function($rootScope){
		// Runs during compile
		return {
			// name: '',
			// priority: 1,
			// terminal: true,
			scope: true, // {} = isolate, true = child, false/undefined = no change
			controller: function($scope, $element, $attrs, $transclude) 
			{
				$scope.active = false;
				$scope.title = $attrs.title;
				$scope.href = $attrs.href;
				$scope.icon = $attrs.icon;
				$scope.side = $attrs.href.substr(1);

				$rootScope.$watch('openSlide', function(newVal, oldVal)
				{
					$scope.active = $rootScope.openSlide == $scope.side;
				});

				$scope.itemClick = function( $event, side )
				{
					$event.preventDefault();

					ga('send', 'event', 'Toolbar', 'Click', side);

					if ( $scope.side == $scope.openSlide )
					{
						$rootScope.open = !$rootScope.open;
					}
					else
					{
						$rootScope.open = true;
						$rootScope.openSlide = $scope.side;
					}

					if ( !$rootScope.open )
						$rootScope.openSlide = null;
				}
			},
			// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
			restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			templateUrl: getPartial('directives/toolbar-item.html'),
			replace: true,
			// transclude: true,
			// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
			link: function($scope, iElm, iAttrs, controller) {
				
			}
		};
	}]);
angular
	.module( APPNAME )
	.directive('fade', [function($animate)
	{
		// Runs during compile
		return {
			// name: '',
			// priority: 1,
			// terminal: true,
			scope: true, // {} = isolate, true = child, false/undefined = no change
			controller: function($scope, $element, $attrs, $transclude) 
			{
			},
			// require: 'ngModel', // Array = multiple requires, ? = optional, ^ = check parent elements
			restrict: 'A', // E = Element, A = Attribute, C = Class, M = Comment
			// template: '',
			// templateUrl: '',
			// replace: true,
			// transclude: true,
			// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),
			link: function($scope, iElm, iAttrs, controller) {
				
			}
		};
	}]);
angular
	.module(APPNAME)
	.service('CanvasService', [function()
	{
		/**
		 *	Return the url of the image of the canvas
		 *
		 *	@return {String}
		 **/
		this.getURL = function()
		{
			return this.canvas[0].toDataURL('image/png').replace("image/png", "image/octet-stream");;
		}

		/**
		 *	Init the canvas
		 *
		 *	@param canvas JQueryElement
		 *	@param container JQueryElement
		 *	@param value Window
		 **/
		this.init = function( canvas, container, window )
		{
			this.canvas = jQuery(canvas);
			this.context = canvas[0].getContext('2d');
			this.stage = new createjs.Stage( canvas[0] );
			createjs.Ticker.addEventListener("tick", this.stage);

			this.container = container;

			this.window = jQuery(window).on('resize', onResizeHandler.bind(this));
			this.refresh();
			this.create();
		}

		/**
		 *	Refresh the value // on resize window
		 **/
		this.refresh = function()
		{
			this.windowWidth = this.window.width();
			this.windowHeight = this.window.height();
		}

		/** 
		 *	Create the objects
		 **/
		this.create = function()
		{
			var r  = new createjs.Shape();
			r.graphics.beginFill( '#0f0' );
			r.graphics.rect( 0, 0, 100, 100 );
			r.graphics.endFill();

			this.stage.addChild(r);
		}

		/**
		 *	The value have change, needs to adapt to the new values
		 *	
		 *	@param options Object
		 **/
		this.update = function( options )
		{
			this.setSize( options.stageWidth, options.stageHeight );
		}

		/**
		 *	Define the size of the canvas
		 *
		 *	@param width Number %
		 *	@param height Number %
		 **/	
		this.setSize = function( width, height )
		{
			console.log('size %sx%s', width, height);

			this.width = width;
			this.height = height;

			var offset = 70;
			var pixelWidth = this.windowWidth * (width*.01) - offset;
			var pixelHeight = this.windowHeight * (height*.01);

			this.container.css({
				width: "calc("+width+"% - 70px)",
				height: height +'%'
			})

			this.canvas.attr({
				width: pixelWidth,
				height: pixelHeight
			});
		}

		/**
		 *	Resize handler
		 *
		 *	@param event
		 **/
		function onResizeHandler(event)
		{
			this.refresh();
			this.width !== null && this.setSize( this.width, this.height );
		}

	}]);